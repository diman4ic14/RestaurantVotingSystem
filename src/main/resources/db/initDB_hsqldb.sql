DROP TABLE dishes IF EXISTS CASCADE;
DROP TABLE restaurants IF EXISTS CASCADE;
DROP TABLE user_roles IF EXISTS CASCADE;
DROP TABLE votes IF EXISTS CASCADE;
DROP TABLE users IF EXISTS CASCADE;

DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq AS INTEGER START WITH 1;

CREATE TABLE users
(
    id         INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY ,
    name       VARCHAR(255)                            NOT NULL,
    email      VARCHAR(255)                            NOT NULL,
    password   VARCHAR(255)                            NOT NULL,
    registered TIMESTAMP DEFAULT now()            NOT NULL,
    enabled    BOOLEAN   DEFAULT TRUE             NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_inx ON users (email);

CREATE TABLE user_roles
(
    role    VARCHAR(255),
    user_id INTEGER NOT NULL,
    CONSTRAINT user_roles_inx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
    id   INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name VARCHAR(255)                                NOT NULL
);

CREATE TABLE dishes
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name          VARCHAR(255)                          NOT NULL,
    price         DECIMAL(9, 2)                    NOT NULL,
    restaurant_id INTEGER                          NOT NULL,
    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE TABLE votes
(
    id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    user_id       INTEGER                                 NOT NULL,
    date_time     TIMESTAMP DEFAULT now()                 NOT NULL,
    restaurant_id INTEGER                                 NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX vote_unique_user_datetime_inx ON votes (user_id, date_time);